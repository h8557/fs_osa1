{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\harry\\\\fullstack\\\\osa1\\\\unicafe\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\harry\\\\fullstack\\\\osa1\\\\unicafe\\\\src\\\\index.js\";\nimport React, { useState } from 'react';\nimport ReactDOM from 'react-dom';\n\nconst Button = props => React.createElement(\"button\", {\n  onClick: props.handleClick,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 5\n  },\n  __self: this\n}, props.text);\n\nconst Header = props => React.createElement(\"div\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 11\n  },\n  __self: this\n}, React.createElement(\"h1\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 12\n  },\n  __self: this\n}, props.text));\n\nconst Statistics = props => {\n  const all = props.good + props.neutral + props.bad;\n  const positive = 100 * props.good / all;\n  if (isNaN(positive)) positive = 0;\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22\n    },\n    __self: this\n  }, React.createElement(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23\n    },\n    __self: this\n  }, \"statistics \"), \"good \", props.good, \" \", React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24\n    },\n    __self: this\n  }), \"neutral \", props.neutral, \" \", React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25\n    },\n    __self: this\n  }), \"bad \", props.bad, \" \", React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26\n    },\n    __self: this\n  }), \"all \", all, \" \", React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27\n    },\n    __self: this\n  }), \"average \", \" \", React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28\n    },\n    __self: this\n  }), \"positive = \", positive, \" % \", React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29\n    },\n    __self: this\n  }));\n};\n\nconst App = () => {\n  const _useState = useState(0),\n        _useState2 = _slicedToArray(_useState, 2),\n        good = _useState2[0],\n        setGood = _useState2[1];\n\n  const _useState3 = useState(0),\n        _useState4 = _slicedToArray(_useState3, 2),\n        neutral = _useState4[0],\n        setNeutral = _useState4[1];\n\n  const _useState5 = useState(0),\n        _useState6 = _slicedToArray(_useState5, 2),\n        bad = _useState6[0],\n        setBad = _useState6[1];\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40\n    },\n    __self: this\n  }, React.createElement(Header, {\n    text: \"give feedback\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41\n    },\n    __self: this\n  }), React.createElement(Button, {\n    handleClick: () => setGood(good + 1),\n    text: \"good\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42\n    },\n    __self: this\n  }), React.createElement(Button, {\n    handleClick: () => setNeutral(neutral + 1),\n    text: \"neutral\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43\n    },\n    __self: this\n  }), React.createElement(Button, {\n    handleClick: () => setBad(bad + 1),\n    text: \"bad\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44\n    },\n    __self: this\n  }), React.createElement(Statistics, {\n    good: good,\n    neutral: neutral,\n    bad: bad,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45\n    },\n    __self: this\n  }));\n};\n\nReactDOM.render(React.createElement(App, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 50\n  },\n  __self: this\n}), document.getElementById('root'));","map":{"version":3,"sources":["C:/Users/harry/fullstack/osa1/unicafe/src/index.js"],"names":["React","useState","ReactDOM","Button","props","handleClick","text","Header","Statistics","all","good","neutral","bad","positive","isNaN","App","setGood","setNeutral","setBad","render","document","getElementById"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,QAAP,MAAqB,WAArB;;AAEA,MAAMC,MAAM,GAAGC,KAAK,IAChB;AAAQ,EAAA,OAAO,EAAEA,KAAK,CAACC,WAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GACKD,KAAK,CAACE,IADX,CADJ;;AAMA,MAAMC,MAAM,GAAGH,KAAK,IACZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAKA,KAAK,CAACE,IAAX,CADJ,CADR;;AAMA,MAAME,UAAU,GAAGJ,KAAK,IAAI;AACxB,QAAMK,GAAG,GAAGL,KAAK,CAACM,IAAN,GAAaN,KAAK,CAACO,OAAnB,GAA6BP,KAAK,CAACQ,GAA/C;AACA,QAAMC,QAAQ,GAAG,MAAMT,KAAK,CAACM,IAAZ,GAAmBD,GAApC;AACA,MAAIK,KAAK,CAACD,QAAD,CAAT,EAAqBA,QAAQ,GAAG,CAAX;AAErB,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBADJ,WAEUT,KAAK,CAACM,IAFhB,OAEsB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFtB,cAGaN,KAAK,CAACO,OAHnB,OAG4B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAH5B,UAISP,KAAK,CAACQ,GAJf,OAIoB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAJpB,UAKSH,GALT,OAKc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IALd,mBAMe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IANf,iBAOgBI,QAPhB,SAO4B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAP5B,CADJ;AAWH,CAhBD;;AAkBA,MAAME,GAAG,GAAG,MAAM;AAAA,oBACUd,QAAQ,CAAC,CAAD,CADlB;AAAA;AAAA,QACPS,IADO;AAAA,QACDM,OADC;;AAAA,qBAEgBf,QAAQ,CAAC,CAAD,CAFxB;AAAA;AAAA,QAEPU,OAFO;AAAA,QAEEM,UAFF;;AAAA,qBAGQhB,QAAQ,CAAC,CAAD,CAHhB;AAAA;AAAA,QAGPW,GAHO;AAAA,QAGFM,MAHE;;AAKd,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,MAAD;AAAQ,IAAA,IAAI,EAAG,eAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,EAEI,oBAAC,MAAD;AAAQ,IAAA,WAAW,EAAE,MAAMF,OAAO,CAACN,IAAI,GAAG,CAAR,CAAlC;AAA8C,IAAA,IAAI,EAAG,MAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFJ,EAGI,oBAAC,MAAD;AAAQ,IAAA,WAAW,EAAE,MAAMO,UAAU,CAACN,OAAO,GAAG,CAAX,CAArC;AAAoD,IAAA,IAAI,EAAG,SAA3D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHJ,EAII,oBAAC,MAAD;AAAQ,IAAA,WAAW,EAAE,MAAMO,MAAM,CAACN,GAAG,GAAG,CAAP,CAAjC;AAA4C,IAAA,IAAI,EAAG,KAAnD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAJJ,EAKI,oBAAC,UAAD;AAAY,IAAA,IAAI,EAAIF,IAApB;AAA0B,IAAA,OAAO,EAAIC,OAArC;AAA8C,IAAA,GAAG,EAAIC,GAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IALJ,CADJ;AASH,CAdD;;AAgBAV,QAAQ,CAACiB,MAAT,CAAgB,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAAhB,EAAyBC,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAAzB","sourcesContent":["import React, { useState } from 'react'\nimport ReactDOM from 'react-dom'\n\nconst Button = props => (\n    <button onClick={props.handleClick}>\n        {props.text}\n    </button>\n)\n\nconst Header = props => (\n        <div>\n            <h1>{props.text}</h1>\n        </div>\n)\n\nconst Statistics = props => {\n    const all = props.good + props.neutral + props.bad\n    const positive = 100 * props.good / all\n    if (isNaN(positive)) positive = 0\n\n    return (\n        <div>\n            <h1>statistics </h1>\n            good {props.good} <br />\n            neutral {props.neutral} <br />\n            bad {props.bad} <br />\n            all {all} <br />\n            average {} <br />\n            positive = {positive} % <br />\n        </div>\n    )\n}\n\nconst App = () => {\n    const [good, setGood] = useState(0)\n    const [neutral, setNeutral] = useState(0)\n    const [bad, setBad] = useState(0)\n\n    return (\n        <div>\n            <Header text = \"give feedback\" />\n            <Button handleClick={() => setGood(good + 1)} text = \"good\" />\n            <Button handleClick={() => setNeutral(neutral + 1)} text = \"neutral\" />\n            <Button handleClick={() => setBad(bad + 1)} text = \"bad\" />\n            <Statistics good = {good} neutral = {neutral} bad = {bad} />\n        </div>\n    )\n}\n\nReactDOM.render(<App />, document.getElementById('root'))"]},"metadata":{},"sourceType":"module"}